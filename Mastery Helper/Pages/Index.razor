@page "/"
@using System 
@using RiotSharp
@using System.Linq
    <!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
    <div class="top-row px-4" style="padding-left: 0px; padding-right: 0px; border-bottom: 1px;">
        <select class="btn selectpicker myDark" data-live-search="true" @bind="selectedRegion" title="Status" style="background-color: #181a1b; color: whitesmoke; border-width: 1px; border-color: #373b3e; text-align: left; text-transform:uppercase">
            <option>@RiotSharp.Misc.Region.Eune</option>
            <option>@RiotSharp.Misc.Region.Euw</option>
            <option>@RiotSharp.Misc.Region.Na</option>
        </select>
        <input type="text" placeholder="summoner name" name="summonerNameInput" class="e-control e-timepicker e-lib e-input btn myDark" @bind="summonerName" style="background-color: #181a1b; color: whitesmoke; margin-left: 3px; margin-right: 3px; border-width: 1px; border-color: #373b3e; text-align:left"/>
        <button class="btn myDark" @onclick="GetSummoner" style="background-color: #181a1b; color: whitesmoke; border-width: 1px; border-color: #373b3e"> submit </button>
    </div>
    <div class="content px-4">

        @if (!string.IsNullOrEmpty(currentSummonerId))
        {
            <div style="text-align:center; margin:auto;">
                <div style="width:80px; display:inline-block;">
                    <figure>
                        <img width="75" height="75" src="@summonerIconUrl" />
                        <figcaption style="font-size:10pt">@summoner.Level</figcaption>
                    </figure>
                </div>
                <div style="display: inline-block; position: relative; top: -40px;">
                    <h2>@summoner.Name (@Convert.ToString(summoner.Region).ToUpper())</h2>
                </div>
            </div>
        }
        else
        {
            <h1 style="text-align:center">Choose a summoner</h1>
        }
        <br>
        @if (string.IsNullOrEmpty(currentSummonerId))
        {

        }
        else
        {
            <div class="text-center">
            <h4> Least amount of points required to achieve level 5 on every champion: @CalculateRemainingPoints() </h4>
            <table class="table" style="color:whitesmoke;">
                <tbody>
                    <text>
                    <tr>
                        <td>
                            Points per aram
                        </td>
                        <td>
                            <input type="number" min="50" oninput="validity.valid||(value='');" class="e-control e-timepicker e-lib e-input btn myDark" @bind="pointsPerAram" style="background-color: #181a1b; color: whitesmoke; margin-left: 3px; margin-right: 3px; border-width: 1px; border-color: #373b3e; text-align:left"/>
                        </td>
                        <td>
                            It would take: @(pointsRemaining/pointsPerAram) aram games
                        </td>
                        <td>
                            Arams played daily
                        </td>
                        <td>
                            <input type="number" min="" oninput="validity.valid||(value='');" class="e-control e-timepicker e-lib e-input btn myDark" @bind="aramsPlayedDaily" style="background-color: #181a1b; color: whitesmoke; margin-left: 3px; margin-right: 3px; border-width: 1px; border-color: #373b3e; text-align:left"/>
                        </td>
                        <td>
                            Days left: @if (aramsPlayedDaily > 0)
                            {
                                <text>@((pointsRemaining / pointsPerAram) / aramsPlayedDaily)</text>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Points per normal
                        </td>
                        <td>
                            <input type="number" min="200" oninput="validity.valid||(value='');" class="e-control e-timepicker e-lib e-input btn myDark" @bind="pointsPerNormal" style="background-color: #181a1b; color: whitesmoke; margin-left: 3px; margin-right: 3px; border-width: 1px; border-color: #373b3e; text-align:left"/>
                        </td>
                        <td>
                            It would take: @(pointsRemaining / pointsPerNormal) normal games
                        </td>
                        <td>
                            Normals played daily
                        </td>
                        <td>
                            <input type="number" min="" oninput="validity.valid||(value='');" class="e-control e-timepicker e-lib e-input btn myDark" @bind="normalsPlayedDaily" style="background-color: #181a1b; color: whitesmoke; margin-left: 3px; margin-right: 3px; border-width: 1px; border-color: #373b3e; text-align:left"/>
                        </td>
                        <td>
                            Days left: @if (normalsPlayedDaily > 0)
                            {
                                <text>@((pointsRemaining / pointsPerNormal) / normalsPlayedDaily)</text>
                            }
                        </td>
                    </tr>
                    </text>
                </tbody>
            </table>
            </div>
            <table class="table table-striped table-dark">
                <thead>
                    <tr>
                        <th class="sort-th" @onclick="@(() => SortTable("ChampionId"))">
                            Champion <span class="oi @(SetSortIcon("ChampionId"))"></span>
                        </th>
                        <th class="sort-th" @onclick="@(() => SortTable("ChampionLevel"))">
                            Level  <span class="oi @(SetSortIcon("ChampionLevel"))"></span>
                        </th>
                        <th class="sort-th" @onclick="@(() => SortTable("ChampionPoints"))">
                            Points <span class="oi @(SetSortIcon("ChampionPoints"))"></span>
                        </th>
                        <th class="sort-th" @onclick="@(() => SortTable("ChampionPointsUntilNextLevel"))">
                            Points To Next Level <span class="oi @(SetSortIcon("ChampionPointsUntilNextLevel"))"></span>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < @championMasteries.Count(); i++)
                    {
                        var rowNumber = i;
                        <tr>
                            <td>@GetChampionName(championMasteries[i].ChampionId)</td>
                            <td>@championMasteries[i].ChampionLevel</td>
                            <td>@championMasteries[i].ChampionPoints</td>
                            <td>@championMasteries[i].ChampionPointsUntilNextLevel</td>
                        </tr>

                    }
                </tbody>
            </table>

        }
    </div>

@code{
    const string apiKey = "RGAPI-1636d837-2d72-455b-9c14-414f5de35d1e";
    public RiotApi api = RiotApi.GetInstance(apiKey, 20, 100);

    string currentSummonerId;
    string summonerName = null;
    RiotSharp.Endpoints.SummonerEndpoint.Summoner summoner;
    string summonerIconUrl = null;
    RiotSharp.Misc.Region selectedRegion = RiotSharp.Misc.Region.Eune;

    static List<RiotSharp.Endpoints.ChampionMasteryEndpoint.ChampionMastery> championMasteries = new List<RiotSharp.Endpoints.ChampionMasteryEndpoint.ChampionMastery>();
    RiotSharp.Endpoints.StaticDataEndpoint.Champion.ChampionListStatic championList;
    string latestVersion = null;

    int pointsPerAram = 700;
    int pointsPerNormal = 1000;
    int aramsPlayedDaily = 1;
    int normalsPlayedDaily = 1;
    int pointsRemaining = 0;

    private bool? isSortedAscending = null;
    private string activeSortColumn = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            latestVersion = api.StaticData.Versions.GetAllAsync().Result[0];
            championList = await api.StaticData.Champions.GetAllAsync(latestVersion);
        }
        catch (Exception e)
        {
            Console.WriteLine($"failed initialising index page {e}");
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            try
            {

            }
            catch (Exception e)
            {
                Console.WriteLine($"failed first render of index page {e}");
            }
        }

    }

    async Task GetMasteryScores()
    {
        try
        {
            championMasteries = await api.ChampionMastery.GetChampionMasteriesAsync(RiotSharp.Misc.Region.Eune, currentSummonerId);
            Console.WriteLine("Mastery scores received");

        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed fetching mastery {e}");
        }
        StateHasChanged();
    }

    async Task GetSummoner()
    {
        try
        {
            Console.WriteLine("Submit pressed");
            summoner = await api.Summoner.GetSummonerByNameAsync(selectedRegion, summonerName);
            currentSummonerId = summoner.Id;
            summonerIconUrl = "http://ddragon.leagueoflegends.com/cdn/"+$"{latestVersion}/img/profileicon/{summoner.ProfileIconId}.png";
            Console.WriteLine($"{summoner.ProfileIconId}");
            Console.WriteLine($"Summoner {summoner.Name} with id: {currentSummonerId} received");
            await GetMasteryScores();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Getting summoner ID failed {e}");
        }
    }

    string GetChampionName(long id)
    {
        return championList.Champions.Values.Single(x => x.Id == id).Name;
        //@masteryService.api.StaticData.Champions.GetAllAsync(latestVersion).Result.Champions.Values.Single(x => x.Id == championMasteries[i].ChampionId).Name
    }

    int CalculateRemainingPoints()
    {
        int remaining = (championList.Champions.Count() - championMasteries.Count()) * 21600;

        for (int i = 0; i < championMasteries.Count(); i++)
        {
            if (championMasteries[i].ChampionPoints < 21600)
            {
                remaining += 21600 - championMasteries[i].ChampionPoints;
            }
        }
        pointsRemaining = remaining;
        return remaining;
    }

    private void SortTable(string columnName, bool changingSort = true)
    {
        if (columnName != activeSortColumn)
        {
            championMasteries = championMasteries.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else if (changingSort)
        {
            if (isSortedAscending == true)
            {
                championMasteries = championMasteries.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                championMasteries = championMasteries.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            isSortedAscending = !isSortedAscending;
        }
        else
        {
            if (isSortedAscending == false)
            {
                championMasteries = championMasteries.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                championMasteries = championMasteries.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
        }
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending == true)
        {
            return "oi-sort-ascending";
        }
        else
        {
            return "oi-sort-descending";
        }
    }
}
